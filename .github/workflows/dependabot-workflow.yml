name: Setup Dependabot Configuration

on:
  workflow_call:
    inputs:
      package_ecosystem:
        required: true
        type: string
        description: 'Package ecosystem (npm, pip, docker, github-actions, etc.)'
      
      directory:
        required: false
        type: string
        default: '/'
        description: 'Directory path relative to repository root'
      
      schedule_interval:
        required: false
        type: string
        default: 'weekly'
        description: 'Update frequency (daily, weekly, monthly)'
      
      allow_major_versions:
        required: false
        type: boolean
        default: false
        description: 'Allow major version updates'
      
      open_pull_requests_limit:
        required: false
        type: number
        default: 5
        description: 'Maximum number of open pull requests (1-10)'
      
      target_branch:
        required: false
        type: string
        default: ''
        description: 'Target branch for updates (defaults to repository default branch)'
      
      commit_message_prefix:
        required: false
        type: string
        default: 'chore'
        description: 'Commit message prefix (chore, ci, build, etc.)'
      
      labels:
        required: false
        type: string
        default: 'dependencies'
        description: 'Comma-separated labels for Dependabot PRs'
      
      reviewers:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of reviewers (usernames)'
      
      assignees:
        required: false
        type: string
        default: ''
        description: 'Comma-separated list of assignees (usernames)'
      
      milestone:
        required: false
        type: number
        default: 0
        description: 'Milestone number to assign to PRs'
      
      versioning_strategy:
        required: false
        type: string
        default: 'auto'
        description: 'Versioning strategy (auto, increase, increase-if-necessary, widen, lockfile-only)'
      
      rebase_strategy:
        required: false
        type: string
        default: 'auto'
        description: 'Rebase strategy (auto, disabled)'
      
      insecure_external_code_execution:
        required: false
        type: string
        default: 'deny'
        description: 'Allow/deny external code execution (allow, deny)'

jobs:
  setup-dependabot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    outputs:
      config_updated: ${{ steps.update_config.outputs.updated }}
      manifest_found: ${{ steps.validate.outputs.manifest_exists }}
      dependabot_file: ${{ steps.update_config.outputs.file_path }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch || github.event.repository.default_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate inputs
        id: validate
        run: |
          set -euo pipefail
          
          # Validar package_ecosystem
          VALID_ECOSYSTEMS="npm yarn pnpm pip pipenv poetry pub cargo bundler composer mix hex nuget gradle maven docker terraform github-actions gomod"
          if ! echo "$VALID_ECOSYSTEMS" | grep -qw "${{ inputs.package_ecosystem }}"; then
            echo "::error::Invalid package_ecosystem: ${{ inputs.package_ecosystem }}"
            echo "Valid options: $VALID_ECOSYSTEMS"
            exit 1
          fi
          
          # Validar schedule_interval
          VALID_INTERVALS="daily weekly monthly"
          if ! echo "$VALID_INTERVALS" | grep -qw "${{ inputs.schedule_interval }}"; then
            echo "::error::Invalid schedule_interval: ${{ inputs.schedule_interval }}"
            echo "Valid options: $VALID_INTERVALS"
            exit 1
          fi
          
          # Validar open_pull_requests_limit
          if [ "${{ inputs.open_pull_requests_limit }}" -lt 1 ] || [ "${{ inputs.open_pull_requests_limit }}" -gt 10 ]; then
            echo "::error::open_pull_requests_limit must be between 1 and 10"
            exit 1
          fi
          
          # Validar versioning_strategy
          VALID_STRATEGIES="auto increase increase-if-necessary widen lockfile-only"
          if ! echo "$VALID_STRATEGIES" | grep -qw "${{ inputs.versioning_strategy }}"; then
            echo "::error::Invalid versioning_strategy: ${{ inputs.versioning_strategy }}"
            echo "Valid options: $VALID_STRATEGIES"
            exit 1
          fi
          
          # Detectar manifest file automáticamente
          ECOSYSTEM="${{ inputs.package_ecosystem }}"
          DIRECTORY="${{ inputs.directory }}"
          
          # Normalizar directorio
          if [ "$DIRECTORY" = "/" ]; then
            SEARCH_DIR="."
          else
            SEARCH_DIR="${DIRECTORY#/}"
          fi
          
          MANIFEST_FILE=""
          case "$ECOSYSTEM" in
            npm|yarn|pnpm)
              MANIFEST_FILE="package.json"
              ;;
            pip)
              if [ -f "$SEARCH_DIR/requirements.txt" ]; then
                MANIFEST_FILE="requirements.txt"
              elif [ -f "$SEARCH_DIR/setup.py" ]; then
                MANIFEST_FILE="setup.py"
              elif [ -f "$SEARCH_DIR/pyproject.toml" ]; then
                MANIFEST_FILE="pyproject.toml"
              elif [ -f "$SEARCH_DIR/Pipfile" ]; then
                MANIFEST_FILE="Pipfile"
              fi
              ;;
            pipenv)
              MANIFEST_FILE="Pipfile"
              ;;
            poetry)
              MANIFEST_FILE="pyproject.toml"
              ;;
            cargo)
              MANIFEST_FILE="Cargo.toml"
              ;;
            bundler)
              MANIFEST_FILE="Gemfile"
              ;;
            composer)
              MANIFEST_FILE="composer.json"
              ;;
            maven)
              MANIFEST_FILE="pom.xml"
              ;;
            gradle)
              if [ -f "$SEARCH_DIR/build.gradle.kts" ]; then
                MANIFEST_FILE="build.gradle.kts"
              else
                MANIFEST_FILE="build.gradle"
              fi
              ;;
            gomod)
              MANIFEST_FILE="go.mod"
              ;;
            docker)
              MANIFEST_FILE="Dockerfile"
              ;;
            github-actions)
              MANIFEST_FILE=".github/workflows"
              ;;
            terraform)
              MANIFEST_FILE="*.tf"
              ;;
            *)
              echo "::warning::Cannot auto-detect manifest for ecosystem: $ECOSYSTEM"
              ;;
          esac
          
          # Verificar existencia del manifest
          MANIFEST_EXISTS="false"
          if [ -n "$MANIFEST_FILE" ]; then
            if [ "$MANIFEST_FILE" = ".github/workflows" ]; then
              if [ -d ".github/workflows" ]; then
                MANIFEST_EXISTS="true"
              fi
            elif [ "$MANIFEST_FILE" = "*.tf" ]; then
              if ls $SEARCH_DIR/*.tf 1> /dev/null 2>&1; then
                MANIFEST_EXISTS="true"
              fi
            else
              FULL_PATH="$SEARCH_DIR/$MANIFEST_FILE"
              if [ -f "$FULL_PATH" ]; then
                MANIFEST_EXISTS="true"
              fi
            fi
          fi
          
          echo "manifest_file=$MANIFEST_FILE" >> $GITHUB_OUTPUT
          echo "manifest_exists=$MANIFEST_EXISTS" >> $GITHUB_OUTPUT
          
          if [ "$MANIFEST_EXISTS" = "false" ]; then
            echo "::warning::Manifest file not found: $MANIFEST_FILE in $SEARCH_DIR"
            echo "::warning::Dependabot may not work correctly without a manifest file"
          else
            echo "::notice::✅ Manifest file found: $MANIFEST_FILE"
          fi
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install --quiet pyyaml
      
      - name: Update Dependabot configuration
        id: update_config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const yaml = require('js-yaml');
            
            // Inputs
            const ecosystem = '${{ inputs.package_ecosystem }}';
            const directory = '${{ inputs.directory }}';
            const scheduleInterval = '${{ inputs.schedule_interval }}';
            const allowMajor = ${{ inputs.allow_major_versions }};
            const prLimit = ${{ inputs.open_pull_requests_limit }};
            const targetBranch = '${{ inputs.target_branch }}' || context.payload.repository.default_branch;
            const labels = '${{ inputs.labels }}'.split(',').map(l => l.trim()).filter(Boolean);
            const reviewers = '${{ inputs.reviewers }}'.split(',').map(r => r.trim()).filter(Boolean);
            const assignees = '${{ inputs.assignees }}'.split(',').map(a => a.trim()).filter(Boolean);
            const milestone = ${{ inputs.milestone }};
            const versioningStrategy = '${{ inputs.versioning_strategy }}';
            const rebaseStrategy = '${{ inputs.rebase_strategy }}';
            const commitPrefix = '${{ inputs.commit_message_prefix }}';
            
            // Paths
            const configPath = '.github/dependabot.yml';
            const configDir = '.github';
            
            // Create .github directory if it doesn't exist
            if (!fs.existsSync(configDir)) {
              fs.mkdirSync(configDir, { recursive: true });
            }
            
            // Load or create config
            let config;
            if (fs.existsSync(configPath)) {
              const content = fs.readFileSync(configPath, 'utf8');
              config = yaml.load(content);
            } else {
              config = {
                version: 2,
                updates: []
              };
            }
            
            // Find existing entry
            const existingIndex = config.updates.findIndex(
              u => u['package-ecosystem'] === ecosystem && u.directory === directory
            );
            
            // Build new entry
            const newEntry = {
              'package-ecosystem': ecosystem,
              directory: directory,
              schedule: {
                interval: scheduleInterval
              },
              'open-pull-requests-limit': prLimit
            };
            
            // Add optional fields
            if (targetBranch !== context.payload.repository.default_branch) {
              newEntry['target-branch'] = targetBranch;
            }
            
            if (labels.length > 0) {
              newEntry.labels = labels;
            }
            
            if (reviewers.length > 0) {
              newEntry.reviewers = reviewers;
            }
            
            if (assignees.length > 0) {
              newEntry.assignees = assignees;
            }
            
            if (milestone > 0) {
              newEntry.milestone = milestone;
            }
            
            if (versioningStrategy !== 'auto') {
              newEntry['versioning-strategy'] = versioningStrategy;
            }
            
            if (rebaseStrategy !== 'auto') {
              newEntry['rebase-strategy'] = rebaseStrategy;
            }
            
            // Add commit message configuration
            newEntry['commit-message'] = {
              prefix: commitPrefix
            };
            
            // Add ignore rules for major versions
            if (!allowMajor) {
              newEntry.ignore = [
                {
                  'dependency-name': '*',
                  'update-types': ['version-update:semver-major']
                }
              ];
            }
            
            // Update or add entry
            if (existingIndex >= 0) {
              config.updates[existingIndex] = newEntry;
              core.info(`Updated existing configuration for ${ecosystem} in ${directory}`);
            } else {
              config.updates.push(newEntry);
              core.info(`Added new configuration for ${ecosystem} in ${directory}`);
            }
            
            // Write config
            const yamlContent = yaml.dump(config, {
              indent: 2,
              lineWidth: -1,
              noRefs: true
            });
            
            fs.writeFileSync(configPath, yamlContent);
            
            core.setOutput('updated', 'true');
            core.setOutput('file_path', configPath);
            
            return { success: true, path: configPath };
      
      - name: Commit and push changes
        id: commit
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            ${{ inputs.commit_message_prefix }}: configure Dependabot for ${{ inputs.package_ecosystem }} in ${{ inputs.directory }}
            
            - Package ecosystem: ${{ inputs.package_ecosystem }}
            - Directory: ${{ inputs.directory }}
            - Schedule: ${{ inputs.schedule_interval }}
            - Allow major versions: ${{ inputs.allow_major_versions }}
            
            [skip ci]
          file_pattern: '.github/dependabot.yml'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
          branch: ${{ inputs.target_branch || github.event.repository.default_branch }}
          push_options: '--force-with-lease'
      
      - name: Retry commit on conflict
        if: steps.commit.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,403,404,422
          script: |
            const { execSync } = require('child_process');
            
            // Pull latest changes
            execSync('git pull --rebase origin ${{ inputs.target_branch || github.event.repository.default_branch }}');
            
            // Re-apply our changes
            execSync('git add .github/dependabot.yml');
            
            try {
              execSync(`git commit -m "${{ inputs.commit_message_prefix }}: configure Dependabot for ${{ inputs.package_ecosystem }} in ${{ inputs.directory }}\n\n[skip ci]"`);
              execSync('git push');
              core.info('✅ Successfully committed after retry');
            } catch (error) {
              core.setFailed(`Failed to commit after retry: ${error.message}`);
            }
      
      - name: Generate summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🤖 Dependabot Configuration Summary
          
          ### Configuration Details
          
          | Setting | Value |
          |---------|-------|
          | **Repository** | `${{ github.repository }}` |
          | **Ecosystem** | `${{ inputs.package_ecosystem }}` |
          | **Directory** | `${{ inputs.directory }}` |
          | **Schedule** | `${{ inputs.schedule_interval }}` |
          | **Target Branch** | `${{ inputs.target_branch || github.event.repository.default_branch }}` |
          | **PR Limit** | `${{ inputs.open_pull_requests_limit }}` |
          | **Allow Major Versions** | `${{ inputs.allow_major_versions }}` |
          | **Versioning Strategy** | `${{ inputs.versioning_strategy }}` |
          | **Commit Prefix** | `${{ inputs.commit_message_prefix }}` |
          | **Manifest File** | `${{ steps.validate.outputs.manifest_file }}` |
          | **Manifest Found** | `${{ steps.validate.outputs.manifest_exists == 'true' && '✅' || '⚠️ Not found' }}` |
          | **Labels** | `${{ inputs.labels }}` |
          | **Reviewers** | `${{ inputs.reviewers || 'None' }}` |
          | **Assignees** | `${{ inputs.assignees || 'None' }}` |
          | **Milestone** | `${{ inputs.milestone > 0 && inputs.milestone || 'None' }}` |
          
          ### Status
          
          ${{ steps.update_config.outputs.updated == 'true' && '✅' || '❌' }} Configuration ${{ steps.commit.outcome == 'success' && 'successfully committed' || 'update attempted' }}
          
          ### Next Steps
          
          1. 🔍 **Monitor**: [Dependabot Insights](https://github.com/${{ github.repository }}/network/updates)
          2. 📬 **Review PRs**: [Dependabot Pull Requests](https://github.com/${{ github.repository }}/pulls?q=is%3Apr+is%3Aopen+author%3Aapp%2Fdependabot)
          3. 🔐 **Security**: [Security Advisories](https://github.com/${{ github.repository }}/security/dependabot)
          4. ⚙️ **Config File**: [dependabot.yml](https://github.com/${{ github.repository }}/blob/${{ inputs.target_branch || github.event.repository.default_branch }}/.github/dependabot.yml)
          
          ---
          
          💡 **Tip**: Dependabot will automatically create PRs based on the schedule. You can also trigger manual scans from the Dependency graph page.
          EOF
