---
name: Setup Dependabot

on:
  workflow_call:
    inputs:
      ecosystems:
        required: true
        type: string
        description: 'JSON con configuraciones de ecosistemas'

      schedule:
        required: false
        type: string
        default: 'weekly'
        description: 'Frecuencia de actualizaciones (daily, weekly, monthly)'

      pr_limit:
        required: false
        type: number
        default: 5
        description: 'M√°ximo de PRs abiertos simult√°neamente'

jobs:
  configure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read  # Para leer labels del repositorio

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Labels
        id: validate_labels
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cat > /tmp/validate_labels.py << 'SCRIPT_EOF'
          import json, os, subprocess, sys
          from collections import defaultdict

          # Obtener labels existentes del repositorio
          repo = os.getenv('GITHUB_REPOSITORY')
          
          try:
              result = subprocess.run(
                  ['gh', 'label', 'list', '--repo', repo, '--json', 'name', '--limit', '1000'],
                  capture_output=True,
                  text=True,
                  check=True
              )
              existing_labels = {label['name'].lower() for label in json.loads(result.stdout)}
              # Solo un notice informativo
              print(f"::notice title=Labels Disponibles::üìã {len(existing_labels)} labels encontrados en el repositorio")
          except Exception as e:
              print(f"::error title=Error API::No se pudieron obtener los labels: {e}")
              existing_labels = set()

          # Parsear ecosistemas
          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error title=JSON Inv√°lido::Error al parsear ecosistemas: {e}")
              sys.exit(1)

          # Validar labels por ecosistema
          validation_results = []
          all_missing_labels = set()
          ecosystems_without_labels = []
          
          for eco in ecosystems:
              if 'labels' not in eco:
                  continue
                  
              requested_labels = [l.strip() for l in eco['labels'].split(',')]
              valid_labels = []
              invalid_labels = []
              
              for label in requested_labels:
                  label_lower = label.lower()
                  if label_lower in existing_labels:
                      valid_labels.append(label)
                  else:
                      invalid_labels.append(label)
                      all_missing_labels.add(label)
              
              # Guardar resultado de validaci√≥n
              validation_results.append({
                  'ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'prefix': eco.get('prefix', 'chore'),
                  'pr_limit': eco.get('open-pull-requests-limit', eco.get('pr_limit', ${{ inputs.pr_limit }})),
                  'valid_labels': valid_labels,
                  'invalid_labels': invalid_labels
              })
              
              # Actualizar ecosistema solo con labels v√°lidos
              if valid_labels:
                  eco['labels'] = ','.join(valid_labels)
              else:
                  eco.pop('labels', None)
                  ecosystems_without_labels.append(f"{eco['ecosystem']} ({eco.get('directory', '/')})")

          # ============================================
          # GENERAR WARNINGS CONSOLIDADOS (Sin duplicados)
          # ============================================
          
          # Warning consolidado de ecosistemas sin labels
          if ecosystems_without_labels:
              eco_list = ', '.join(ecosystems_without_labels[:3])  # Primeros 3
              if len(ecosystems_without_labels) > 3:
                  eco_list += f' (+{len(ecosystems_without_labels) - 3} m√°s)'
              print(f"::warning title=Ecosistemas Sin Labels::‚ö†Ô∏è {len(ecosystems_without_labels)} ecosistema(s) sin labels v√°lidos: {eco_list}")

          # Warning consolidado de labels faltantes
          if all_missing_labels:
              missing_list = ', '.join(sorted(all_missing_labels)[:5])  # Primeros 5
              if len(all_missing_labels) > 5:
                  missing_list += f' (+{len(all_missing_labels) - 5} m√°s)'
              print(f"::warning title=Labels Faltantes::üè∑Ô∏è {len(all_missing_labels)} label(s) no existen: {missing_list}")

          # Notice consolidado de √©xito
          valid_ecosystems = len([r for r in validation_results if r['valid_labels']])
          if valid_ecosystems > 0:
              print(f"::notice title=Validaci√≥n Exitosa::‚úÖ {valid_ecosystems} de {len(ecosystems)} ecosistemas tienen labels v√°lidos")

          # ============================================
          # OUTPUTS
          # ============================================
          
          # Ecosistemas validados (limpios)
          validated_json = json.dumps(ecosystems, ensure_ascii=False)
          print(f"validated_ecosystems={validated_json}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"validated_ecosystems<<EOF\n{validated_json}\nEOF\n")
          
          # Resultados de validaci√≥n (para el summary)
          results_json = json.dumps(validation_results, ensure_ascii=False)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"validation_results<<EOF\n{results_json}\nEOF\n")
          
          # Labels faltantes √∫nicos
          missing_json = json.dumps(sorted(all_missing_labels), ensure_ascii=False)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"missing_labels<<EOF\n{missing_json}\nEOF\n")
          
          # Flags booleanos
          has_missing = 'true' if all_missing_labels else 'false'
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"has_missing_labels={has_missing}\n")
              f.write(f"valid_ecosystems_count={valid_ecosystems}\n")
              f.write(f"total_ecosystems_count={len(ecosystems)}\n")

          SCRIPT_EOF

          python3 /tmp/validate_labels.py

      - name: Generate Dependabot Config
        id: generate
        run: |
          cat > /tmp/generate_config.py << 'SCRIPT_EOF'
          import yaml, json, sys, os
          from pathlib import Path
          from datetime import datetime

          # Usar ecosistemas VALIDADOS (ya sin labels inv√°lidos)
          try:
              ecosystems = json.loads('''${{ steps.validate_labels.outputs.validated_ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error title=JSON Inv√°lido::Error al parsear ecosistemas validados: {e}")
              sys.exit(1)

          if not ecosystems:
              print(f"::error title=Sin Ecosistemas::No hay ecosistemas para configurar")
              sys.exit(1)

          # Generar configuraci√≥n
          config = {
              'version': 2,
              'updates': []
          }

          for eco in ecosystems:
              entry = {
                  'package-ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'schedule': {'interval': '${{ inputs.schedule }}'},
                  'open-pull-requests-limit': eco.get('pr_limit', ${{ inputs.pr_limit }})
              }

              # ‚úÖ Los labels ya fueron validados en el step anterior
              # Solo agregamos si existen
              if 'labels' in eco and eco['labels']:
                  labels_list = [l.strip() for l in eco['labels'].split(',')]
                  entry['labels'] = labels_list

              # Agregar commit prefix si existe
              if 'prefix' in eco:
                  entry['commit-message'] = {'prefix': eco['prefix']}

              config['updates'].append(entry)

          # Guardar archivo
          Path('.github').mkdir(exist_ok=True)
          with open('.github/dependabot.yml', 'w') as f:
              f.write('---\n')  # Document start para yamllint
              yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)

          # Notice de √©xito (sin warnings)
          print(f"::notice title=Configuraci√≥n Generada::‚úÖ {len(ecosystems)} ecosistemas configurados en dependabot.yml")

          # Guardar outputs
          timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"ecosystems_count={len(ecosystems)}\n")
              f.write(f"schedule=${{ inputs.schedule }}\n")
              f.write(f"timestamp={timestamp}\n")

          # Mostrar configuraci√≥n generada (para debug)
          print("\nüìã Configuraci√≥n generada:")
          print(yaml.dump(config, default_flow_style=False))
          SCRIPT_EOF

          python3 /tmp/generate_config.py

      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        id: commit
        with:
          commit_message: 'chore: update Dependabot configuration [skip ci]'
          file_pattern: '.github/dependabot.yml'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Generate Summary
        if: always()
        run: |
          cat > /tmp/generate_summary.py << 'SCRIPT_EOF'
          import json, os
          from datetime import datetime

          # ‚úÖ USAR RESULTADOS DE VALIDACI√ìN
          validation_results = json.loads(os.getenv('VALIDATION_RESULTS', '[]'))
          missing_labels = json.loads(os.getenv('MISSING_LABELS', '[]'))
          has_missing = os.getenv('HAS_MISSING_LABELS', 'false') == 'true'
          
          ecosystems_count = os.getenv('ECOSYSTEMS_COUNT', '0')
          schedule = os.getenv('SCHEDULE', 'weekly')
          timestamp = os.getenv('TIMESTAMP', datetime.now().isoformat())
          commit_status = os.getenv('COMMIT_STATUS', 'false')
          commit_sha = os.getenv('COMMIT_SHA', 'N/A')
          repo = os.getenv('GITHUB_REPOSITORY', 'unknown/repo')
          branch = os.getenv('GITHUB_REF_NAME', 'main')

          summary_parts = []

          # Header
          summary_parts.append("# üéØ Configuraci√≥n de Dependabot\n\n")

          # Status badge
          if commit_status == 'true':
              summary_parts.append("![Status](https://img.shields.io/badge/Estado-‚úÖ_Actualizado-success)\n")
          else:
              summary_parts.append("![Status](https://img.shields.io/badge/Estado-‚ö†Ô∏è_Sin_Cambios-yellow)\n")
          
          summary_parts.append(f"![Schedule](https://img.shields.io/badge/Frecuencia-{schedule}-blue)\n")
          summary_parts.append(f"![Ecosystems](https://img.shields.io/badge/Ecosistemas-{ecosystems_count}-informational)\n\n")

          # Warning si hay labels faltantes
          if has_missing:
              summary_parts.append("> ‚ö†Ô∏è **Advertencia**: Algunos labels configurados no existen en el repositorio y fueron omitidos.\n\n")

          # Resumen de configuraci√≥n
          summary_parts.append("## üìä Resumen de Configuraci√≥n\n\n")
          summary_parts.append("| M√©trica | Valor |\n")
          summary_parts.append("|---------|-------|\n")
          summary_parts.append(f"| üîß Ecosistemas Configurados | {ecosystems_count} |\n")
          summary_parts.append(f"| üìÖ Frecuencia de Actualizaci√≥n | `{schedule}` |\n")
          summary_parts.append(f"| üïê Ejecutado el | `{timestamp}` |\n")
          
          if commit_status == 'true':
              summary_parts.append(f"| üìù Estado del Commit | üü¢ Actualizado |\n")
              summary_parts.append(f"| üîó Commit SHA | [`{commit_sha[:7]}`](https://github.com/{repo}/commit/{commit_sha}) |\n\n")
          else:
              summary_parts.append(f"| üìù Estado del Commit | üü° Sin cambios |\n\n")

          # Tabla de ecosistemas CON VALIDACI√ìN
          summary_parts.append("## üîß Ecosistemas Configurados\n\n")
          summary_parts.append("| Ecosistema | Directorio | PRs | Labels V√°lidos | Labels Omitidos | Prefix |\n")
          summary_parts.append("|------------|------------|-----|----------------|-----------------|--------|\n")

          emoji_map = {
              'npm': 'üì¶', 'pip': 'üêç', 'bundler': 'üíé',
              'docker': 'üê≥', 'github-actions': '‚ö°', 'composer': 'üéµ',
              'maven': '‚òï', 'gradle': 'üêò', 'cargo': 'ü¶Ä',
              'gomod': 'üêπ', 'nuget': 'üìò'
          }

          for result in validation_results:
              eco_name = result['ecosystem']
              directory = result['directory']
              emoji = emoji_map.get(eco_name, 'üì¶')
              
              # ‚úÖ Labels REALMENTE v√°lidos
              valid_labels = result.get('valid_labels', [])
              valid_str = ', '.join([f"`{l}`" for l in valid_labels]) if valid_labels else '‚Äî'
              
              # ‚ö†Ô∏è Labels REALMENTE inv√°lidos
              invalid_labels = result.get('invalid_labels', [])
              invalid_str = '‚úÖ Ninguno'
              if invalid_labels:
                  invalid_str = f"‚ö†Ô∏è `{'`, `'.join(invalid_labels)}`"
              
              # Obtener datos adicionales del ecosistema original
              # (necesitamos buscar en los datos validados)
              prefix = result.get('prefix', 'chore')
              pr_limit = result.get('pr_limit', 5)
              
              summary_parts.append(
                  f"| {emoji} **{eco_name}** | `{directory}` | {pr_limit} | "
                  f"{valid_str} | {invalid_str} | `{prefix}` |\n"
              )

          summary_parts.append("\n")

          # Secci√≥n de labels faltantes
          if has_missing and missing_labels:
              summary_parts.append("## ‚ö†Ô∏è Labels Faltantes\n\n")
              summary_parts.append("Los siguientes labels fueron omitidos porque no existen en el repositorio:\n\n")
              summary_parts.append("| Label | Acci√≥n Recomendada |\n")
              summary_parts.append("|-------|-----------------------|\n")
              
              for label in missing_labels:
                  create_url = f"https://github.com/{repo}/labels/new?name={label}&color=0366d6"
                  summary_parts.append(f"| `{label}` | [‚ûï Crear Label]({create_url}) |\n")
              
              summary_parts.append("\n")
              summary_parts.append("> üí° **Recomendaci√≥n**: Crea los labels faltantes para que Dependabot los use en futuros PRs.\n\n")

          # Resto de secciones (expandibles)
          summary_parts.append("<details>\n")
          summary_parts.append("<summary>üîç <b>¬øQu√© hace Dependabot?</b></summary>\n\n")
          summary_parts.append("Dependabot es un bot de GitHub que:\n\n")
          summary_parts.append("- üÜï **Detecta** nuevas versiones disponibles\n")
          summary_parts.append("- üîí **Identifica** vulnerabilidades de seguridad\n")
          summary_parts.append("- üöÄ **Crea PRs** autom√°ticamente con las actualizaciones\n")
          summary_parts.append("- ‚úÖ **Ejecuta tests** en los PRs (si est√°n configurados)\n")
          summary_parts.append("- üéØ **Respeta** semantic versioning\n\n")
          summary_parts.append("</details>\n\n")

          summary_parts.append("<details>\n")
          summary_parts.append("<summary>üõ†Ô∏è <b>Personalizar Configuraci√≥n</b></summary>\n\n")
          summary_parts.append("Para modificar la configuraci√≥n, edita el workflow que llama a este reusable:\n\n")
          summary_parts.append("```yaml\n")
          summary_parts.append("with:\n")
          summary_parts.append("  schedule: 'daily'  # Cambiar frecuencia\n")
          summary_parts.append("  pr_limit: 10       # Ajustar l√≠mite de PRs\n")
          summary_parts.append("  ecosystems: |      # Modificar ecosistemas\n")
          summary_parts.append("    [\n")
          summary_parts.append('      {"ecosystem": "pip", "directory": "/api"}\n')
          summary_parts.append("    ]\n")
          summary_parts.append("```\n\n")
          summary_parts.append("</details>\n\n")

          summary_parts.append("---\n\n")
          summary_parts.append("**üéâ Configuraci√≥n completada exitosamente!**\n\n")
          summary_parts.append("> üí° **Tip**: Usa `workflow_dispatch` en el workflow llamador para regenerar esta configuraci√≥n manualmente.\n")

          # Escribir summary
          summary = ''.join(summary_parts)
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
              f.write(summary)

          print("‚úÖ Summary generado correctamente")
          SCRIPT_EOF

          # ‚úÖ PASAR DATOS VALIDADOS
          VALIDATION_RESULTS='${{ steps.validate_labels.outputs.validation_results }}' \
          MISSING_LABELS='${{ steps.validate_labels.outputs.missing_labels }}' \
          HAS_MISSING_LABELS='${{ steps.validate_labels.outputs.has_missing_labels }}' \
          ECOSYSTEMS_COUNT='${{ steps.generate.outputs.ecosystems_count }}' \
          SCHEDULE='${{ steps.generate.outputs.schedule }}' \
          TIMESTAMP='${{ steps.generate.outputs.timestamp }}' \
          COMMIT_STATUS='${{ steps.commit.outputs.changes_detected }}' \
          COMMIT_SHA='${{ steps.commit.outputs.commit_hash }}' \
          GITHUB_REPOSITORY='${{ github.repository }}' \
          GITHUB_REF_NAME='${{ github.ref_name }}' \
          python3 /tmp/generate_summary.py
