name: Setup Dependabot

on:
  workflow_call:
    inputs:
      ecosystems:
        required: true
        type: string
        description: 'JSON con configuraciones de ecosistemas'

      schedule:
        required: false
        type: string
        default: 'weekly'
        description: 'Frecuencia de actualizaciones (daily, weekly, monthly)'

      pr_limit:
        required: false
        type: number
        default: 5
        description: 'Máximo de PRs abiertos simultáneamente'

      target_branch:
        required: false
        type: string
        default: ''
        description: 'Rama objetivo para PRs (vacío = rama predeterminada)'

jobs:
  configure:
    name: Configuring
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: read

    steps:
      - name: 🚀 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Validate Labels
        id: validate_labels
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cat > /tmp/validate_labels.py << 'SCRIPT_EOF'
          import json, os, subprocess, sys
          from collections import defaultdict

          repo = os.getenv('GITHUB_REPOSITORY')

          try:
              result = subprocess.run(
                  ['gh', 'label', 'list', '--repo', repo, '--json', 'name,color,description', '--limit', '1000'],
                  capture_output=True, text=True, check=True
              )
              labels_data = json.loads(result.stdout)
              existing_labels = {label['name'].lower(): label for label in labels_data}
          except Exception as e:
              print(f"::error::No se pudieron obtener los labels: {e}")
              existing_labels = {}

          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error::Error al parsear ecosistemas: {e}")
              sys.exit(1)

          missing_by_ecosystem = defaultdict(list)
          valid_by_ecosystem = defaultdict(list)
          filtered_ecosystems = []
          all_missing = set()

          for eco in ecosystems:
              labels = [l.strip() for l in eco.get('labels', '').split(',') if l.strip()]
              valid_labels = []
              
              for label in labels:
                  if label.lower() in existing_labels:
                      valid_by_ecosystem[f"{eco['ecosystem']}|{eco['directory']}"].append(label)
                      valid_labels.append(label)
                  else:
                      missing_by_ecosystem[f"{eco['ecosystem']}|{eco['directory']}"].append(label)
                      all_missing.add(label)

              # Crear ecosistema filtrado con SOLO labels válidos
              filtered_eco = eco.copy()
              filtered_eco['labels'] = ','.join(valid_labels)
              filtered_ecosystems.append(filtered_eco)

          # Generar outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"missing_labels={','.join(sorted(all_missing))}\n")
              f.write(f"missing_count={len(all_missing)}\n")
              f.write(f"valid_count={sum(len(v) for v in valid_by_ecosystem.values())}\n")
              f.write(f"has_missing={'true' if all_missing else 'false'}\n")
              
              # Exportar ecosistemas filtrados
              filtered_json = json.dumps(filtered_ecosystems)
              f.write(f"filtered_ecosystems<<EOF\n")
              f.write(f"{filtered_json}\n")
              f.write(f"EOF\n")

          # Guardar datos para el summary
          with open('/tmp/validation_data.json', 'w') as f:
              json.dump({
                  'missing_by_ecosystem': dict(missing_by_ecosystem),
                  'valid_by_ecosystem': dict(valid_by_ecosystem),
                  'existing_labels': existing_labels
              }, f)

          if all_missing:
              print(f"::warning title=Labels Faltantes::Se encontraron {len(all_missing)} labels sin configurar. Serán omitidos del archivo generado.")
              for label in sorted(all_missing):
                  print(f"  ⚠️ {label}")
          else:
              print("::notice title=Validación Exitosa::Todos los labels están configurados correctamente")
          
          print(f"\n📊 Resumen:")
          print(f"  ✅ Labels válidos: {sum(len(v) for v in valid_by_ecosystem.values())}")
          print(f"  ⚠️ Labels faltantes: {len(all_missing)}")
          print(f"  📦 Ecosistemas: {len(ecosystems)}")
          SCRIPT_EOF

          python3 /tmp/validate_labels.py

      - name: 📝 Generate Dependabot Config
        env:
          FILTERED_ECOSYSTEMS: ${{ steps.validate_labels.outputs.filtered_ecosystems }}
        run: |
          cat > /tmp/generate_config.py << 'SCRIPT_EOF'
          import json, os, sys

          try:
              ecosystems = json.loads(os.getenv('FILTERED_ECOSYSTEMS', '[]'))
          except json.JSONDecodeError as e:
              print(f"::error::JSON inválido: {e}")
              sys.exit(1)

          if not ecosystems:
              print("::error::No hay ecosistemas para configurar")
              sys.exit(1)

          schedule = '${{ inputs.schedule }}'
          pr_limit = ${{ inputs.pr_limit }}
          target_branch = '${{ inputs.target_branch }}'

          config = {'version': 2, 'updates': []}

          for eco in ecosystems:
              update = {
                  'package-ecosystem': eco['ecosystem'],
                  'directory': eco['directory'],
                  'schedule': {'interval': schedule},
                  'open-pull-requests-limit': eco.get('pr_limit', pr_limit)
              }

              if target_branch:
                  update['target-branch'] = target_branch

              # Los labels ya están filtrados (solo válidos)
              labels = [l.strip() for l in eco.get('labels', '').split(',') if l.strip()]
              if labels:
                  update['labels'] = labels

              prefix = eco.get('prefix', '').strip()
              if prefix:
                  update['commit-message'] = {'prefix': prefix}

              config['updates'].append(update)

          import yaml
          os.makedirs('.github', exist_ok=True)

          with open('.github/dependabot.yml', 'w') as f:
              yaml.dump(config, f, sort_keys=False, default_flow_style=False, indent=2)

          print("✅ Configuración generada exitosamente (solo con labels válidos)")

          with open('.github/dependabot.yml', 'r') as f:
              content = f.read()
              print("\n📄 Contenido generado:")
              print(content)
          SCRIPT_EOF

          python3 /tmp/generate_config.py

      - name: 💾 Commit Changes
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet .github/dependabot.yml; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "📌 Sin cambios - La configuración está actualizada"
          else
            git add .github/dependabot.yml
            git commit -m "chore: update dependabot configuration"
            git push
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "✅ Cambios commiteados y pusheados"
          fi

      - name: 🔄 Detect Dependabot PRs
        id: detect_prs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          prs_json=$(gh pr list \
            --author "app/dependabot" \
            --state open \
            --json number,title,url,labels,createdAt,headRefName \
            --limit 50 2>/dev/null || echo '[]')
          
          echo "prs_data<<EOF" >> $GITHUB_OUTPUT
          echo "$prs_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          prs_count=$(echo "$prs_json" | jq '. | length')
          echo "prs_count=$prs_count" >> $GITHUB_OUTPUT
          
          echo "📊 PRs detectados: $prs_count"

      - name: 📊 Generate Summary
        env:
          PRS_DATA: ${{ steps.detect_prs.outputs.prs_data }}
          PRS_COUNT: ${{ steps.detect_prs.outputs.prs_count }}
          CHANGED: ${{ steps.commit.outputs.changed }}
          COMMIT_SHA: ${{ steps.commit.outputs.commit_sha }}
          MISSING_COUNT: ${{ steps.validate_labels.outputs.missing_count }}
          VALID_COUNT: ${{ steps.validate_labels.outputs.valid_count }}
        run: |
          cat > /tmp/generate_summary.py << 'SCRIPT_EOF'
          import json, os
          from datetime import datetime

          repo = os.getenv('GITHUB_REPOSITORY')
          server_url = os.getenv('GITHUB_SERVER_URL', 'https://github.com')
          changed = os.getenv('CHANGED', 'false')
          commit_sha = os.getenv('COMMIT_SHA', '')
          missing_count = int(os.getenv('MISSING_COUNT', '0'))
          valid_count = int(os.getenv('VALID_COUNT', '0'))

          # Cargar datos de validación
          try:
              with open('/tmp/validation_data.json', 'r') as f:
                  validation_data = json.load(f)
              missing_by_ecosystem = validation_data['missing_by_ecosystem']
              valid_by_ecosystem = validation_data['valid_by_ecosystem']
              existing_labels = validation_data['existing_labels']
          except Exception as e:
              print(f"::error::No se pudo cargar validation_data.json: {e}")
              missing_by_ecosystem = {}
              valid_by_ecosystem = {}
              existing_labels = {}

          # Cargar ecosistemas originales
          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except:
              ecosystems = []

          # Cargar PRs
          try:
              prs_raw = os.getenv('PRS_DATA', '[]')
              prs_data = json.loads(prs_raw) if prs_raw and prs_raw.strip() != '' else []
          except Exception as e:
              print(f"::debug::Error parseando PRs: {e}")
              prs_data = []

          prs_count = int(os.getenv('PRS_COUNT', '0'))

          summary = []

          # Header
          summary.append("# 🤖 Configuración de Dependabot\n\n")

          # Estado
          if changed == 'true' and commit_sha:
              commit_url = f"{server_url}/{repo}/commit/{commit_sha}"
              summary.append(f"✅ **Configuración actualizada** • Commit: [📝 `{commit_sha[:7]}`]({commit_url})\n\n")
          else:
              summary.append("ℹ️ **Sin cambios** • La configuración está actualizada\n\n")

          # Resumen ejecutivo
          total_ecosystems = len(ecosystems)
          total_labels = valid_count + missing_count

          summary.append("## 📊 Resumen Ejecutivo\n\n")
          summary.append("| 🔧 Ecosistemas | 🏷️ Labels Válidos | ⚠️ Labels Faltantes | 🔄 PRs Activos |\n")
          summary.append("|:--------------:|:-----------------:|:-------------------:|:--------------:|\n")
          summary.append(f"| **{total_ecosystems}** | **{valid_count}** | **{missing_count}** | **{prs_count}** |\n\n")

          # Tabla de ecosistemas
          summary.append("<details open>\n")
          summary.append("<summary><h2>📦 Ecosistemas Configurados</h2></summary>\n\n")
          summary.append("<table>\n")
          summary.append("<colgroup>\n")
          summary.append("<col style='width:12%'>\n")
          summary.append("<col style='width:12%'>\n")
          summary.append("<col style='width:10%'>\n")
          summary.append("<col style='width:8%'>\n")
          summary.append("<col style='width:28%'>\n")
          summary.append("<col style='width:30%'>\n")
          summary.append("</colgroup>\n")
          summary.append("<thead>\n")
          summary.append("<tr>\n")
          summary.append("<th>Ecosistema</th>\n")
          summary.append("<th>Directorio</th>\n")
          summary.append("<th>Prefijo</th>\n")
          summary.append("<th>PR Limit</th>\n")
          summary.append("<th>Labels Válidos</th>\n")
          summary.append("<th>Labels Faltantes</th>\n")
          summary.append("</tr>\n")
          summary.append("</thead>\n")
          summary.append("<tbody>\n")

          for eco in ecosystems:
              eco_key = f"{eco['ecosystem']}|{eco['directory']}"
              
              valid_labels = valid_by_ecosystem.get(eco_key, [])
              missing_labels = missing_by_ecosystem.get(eco_key, [])

              valid_badges = []
              for label in valid_labels:
                  label_info = existing_labels.get(label.lower(), {})
                  color = label_info.get('color', '0366d6')
                  valid_badges.append(
                      f"<img src='https://img.shields.io/badge/{label.replace('-', '--')}-{color}?style=flat-square' alt='{label}' style='margin:2px'>"
                  )

              missing_badges = [
                  f'<code style="white-space:nowrap">{label}</code>' 
                  for label in missing_labels
              ]

              summary.append("<tr>\n")
              summary.append(f"<td><code>{eco['ecosystem']}</code></td>\n")
              summary.append(f"<td><code>{eco['directory']}</code></td>\n")
              summary.append(f"<td><code>{eco.get('prefix', '-')}</code></td>\n")
              summary.append(f"<td>{eco.get('pr_limit', '${{ inputs.pr_limit }}')}</td>\n")
              summary.append(f"<td>{' '.join(valid_badges) if valid_badges else '➖'}</td>\n")
              summary.append(f"<td>{' '.join(missing_badges) if missing_badges else '✅'}</td>\n")
              summary.append("</tr>\n")

          summary.append("</tbody>\n")
          summary.append("</table>\n\n")

          if missing_count > 0:
              labels_url = f"{server_url}/{repo}/labels"
              summary.append(f"> ⚠️ **Acción Recomendada:** Algunos labels no existen. ")
              summary.append(f"<a href='{labels_url}'>🔧 <b>Crear labels faltantes</b></a> o ajustar la configuración.\n\n")

          summary.append("</details>\n\n")

          # PRs de Dependabot
          if prs_data and len(prs_data) > 0:
              summary.append("<details>\n")
              summary.append(f"<summary><h2>🔄 Pull Requests de Dependabot ({min(prs_count, 15)})</h2></summary>\n\n")

              summary.append("<table>\n")
              summary.append("<thead>\n")
              summary.append("<tr>\n")
              summary.append("<th>PR</th>\n")
              summary.append("<th>Título</th>\n")
              summary.append("<th>Labels</th>\n")
              summary.append("<th>Creado</th>\n")
              summary.append("</tr>\n")
              summary.append("</thead>\n")
              summary.append("<tbody>\n")

              for pr in prs_data[:15]:
                  pr_number = pr.get('number', 'N/A')
                  pr_url = pr.get('url', '#')
                  pr_title = pr.get('title', 'Sin título')
                  pr_labels = ', '.join([l.get('name', '') for l in pr.get('labels', [])])
                  pr_created = pr.get('createdAt', '')
                  
                  try:
                      pr_date = datetime.fromisoformat(pr_created.replace('Z', '+00:00')).strftime('%Y-%m-%d')
                  except:
                      pr_date = 'N/A'

                  summary.append("<tr>\n")
                  summary.append(f"<td><a href='{pr_url}'><b>#{pr_number}</b></a></td>\n")
                  summary.append(f"<td>{pr_title}</td>\n")
                  summary.append(f"<td>{pr_labels if pr_labels else '➖'}</td>\n")
                  summary.append(f"<td>{pr_date}</td>\n")
                  summary.append("</tr>\n")

              summary.append("</tbody>\n")
              summary.append("</table>\n\n")

              if prs_count > 15:
                  prs_url = f"{server_url}/{repo}/pulls?q=is%3Apr+is%3Aopen+author%3Aapp%2Fdependabot"
                  summary.append(f"> <a href='{prs_url}'>📋 <b>Ver todos los PRs ({prs_count})</b></a>\n\n")

              summary.append("</details>\n\n")
          else:
              summary.append("<details>\n")
              summary.append("<summary><h2>🔄 Pull Requests de Dependabot</h2></summary>\n\n")
              summary.append("> ℹ️ No hay PRs activos de Dependabot en este momento.\n\n")
              summary.append("</details>\n\n")

          # Enlaces útiles
          summary.append("<details>\n")
          summary.append("<summary><h2>🔗 Enlaces Útiles</h2></summary>\n\n")

          config_url = f"{server_url}/{repo}/blob/main/.github/dependabot.yml"
          summary.append(f"- 📝 <a href='{config_url}'><b>Ver Configuración</b></a> — Archivo dependabot.yml generado\n")

          security_url = f"{server_url}/{repo}/settings/security_analysis"
          summary.append(f"- 🛡️ <a href='{security_url}'><b>Security Settings</b></a> — Configurar análisis de seguridad\n")

          insights_url = f"{server_url}/{repo}/network/dependencies"
          summary.append(f"- 📊 <a href='{insights_url}'><b>Dependency Graph</b></a> — Visualizar dependencias\n")

          labels_url = f"{server_url}/{repo}/labels"
          summary.append(f"- 🏷️ <a href='{labels_url}'><b>Gestionar Labels</b></a> — Crear o editar labels\n")

          prs_url = f"{server_url}/{repo}/pulls?q=is%3Apr+author%3Aapp%2Fdependabot"
          summary.append(f"- 🔄 <a href='{prs_url}'><b>PRs de Dependabot</b></a> — Ver Pull Requests activos\n")

          advisories_url = f"{server_url}/{repo}/security/dependabot"
          summary.append(f"- 🚨 <a href='{advisories_url}'><b>Security Alerts</b></a> — Revisar alertas de seguridad\n\n")

          summary.append("</details>\n\n")

          # Información del workflow
          summary.append("<details>\n")
          summary.append("<summary><b>📚 Sobre el Workflow Reusable</b></summary>\n\n")

          summary.append("#### ✅ Características\n\n")
          summary.append("- 🔍 Validación automática de labels\n")
          summary.append("- 🛡️ Filtrado automático de labels inválidos\n")
          summary.append("- 📊 Summary con diseño consolidado y responsive\n")
          summary.append("- 🏷️ Badges con colores del repositorio\n")
          summary.append("- 🔗 Enlaces directos a recursos\n")
          summary.append("- 🔄 Detección de PRs existentes\n")
          summary.append("- 📝 Configuración personalizable\n")
          summary.append("- 🎯 Rama objetivo configurable\n\n")

          summary.append("#### 🔮 Mejoras Futuras\n\n")
          summary.append("- 🔔 Notificaciones a Slack/Discord\n")
          summary.append("- 📈 Matriz de compatibilidad\n")
          summary.append("- 🛡️ Integración con Security Advisories\n")
          summary.append("- 📊 Dashboard centralizado\n")
          summary.append("- 🔍 Análisis predictivo de impacto\n\n")

          summary.append("</details>\n\n")

          # Footer
          timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
          workflow_url = f"{server_url}/jersonmartinez/reusable-workflows"
          summary.append(f"<sub>🤖 Generado por <a href='{workflow_url}'><b>Reusable Workflows</b></a> • {timestamp}</sub>\n")

          # Escribir summary
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
              f.write(''.join(summary))

          print("✅ Summary generado correctamente")
          print(f"📊 PRs detectados: {prs_count}")
          print(f"📦 Ecosistemas: {len(ecosystems)}")
          print(f"✅ Labels válidos: {valid_count}")
          print(f"⚠️ Labels omitidos: {missing_count}")
          SCRIPT_EOF

          python3 /tmp/generate_summary.py
