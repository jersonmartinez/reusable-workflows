name: Setup Dependabot

on:
  workflow_call:
    inputs:
      ecosystems:
        required: true
        type: string
        description: 'JSON con configuraciones de ecosistemas'

      schedule:
        required: false
        type: string
        default: 'weekly'
        description: 'Frecuencia de actualizaciones (daily, weekly, monthly)'

      pr_limit:
        required: false
        type: number
        default: 5
        description: 'Máximo de PRs abiertos simultáneamente'

jobs:
  configure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Labels
        id: validate_labels
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cat > /tmp/validate_labels.py << 'SCRIPT_EOF'
          import json, os, subprocess, sys
          from collections import defaultdict

          # Obtener labels existentes del repositorio
          repo = os.getenv('GITHUB_REPOSITORY')

          try:
              result = subprocess.run(
                  ['gh', 'label', 'list', '--repo', repo, '--json', 'name', '--limit', '1000'],
                  capture_output=True,
                  text=True,
                  check=True
              )
              existing_labels = {label['name'].lower() for label in json.loads(result.stdout)}
              print(f"::notice title=Labels Disponibles::📋 {len(existing_labels)} labels encontrados en el repositorio")
          except Exception as e:
              print(f"::error title=Error API::No se pudieron obtener los labels: {e}")
              existing_labels = set()

          # Parsear ecosistemas
          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error title=JSON Inválido::Error al parsear ecosistemas: {e}")
              sys.exit(1)

          # Validar labels por ecosistema
          validation_results = []
          all_missing_labels = set()
          ecosystems_without_labels = []

          for eco in ecosystems:
              if 'labels' not in eco or not eco['labels']:
                  continue

              requested_labels = [l.strip() for l in eco['labels'].split(',')]
              valid_labels = []
              invalid_labels = []

              for label in requested_labels:
                  if label.lower() in existing_labels:
                      valid_labels.append(label)
                  else:
                      invalid_labels.append(label)
                      all_missing_labels.add(label)

              # Actualizar ecosistema con labels válidos
              if valid_labels:
                  eco['labels'] = valid_labels
              else:
                  eco.pop('labels', None)
                  ecosystems_without_labels.append(f"{eco['ecosystem']} ({eco.get('directory', '/')})")

              validation_results.append({
                  'ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'requested': len(requested_labels),
                  'valid': len(valid_labels),
                  'invalid': len(invalid_labels),
                  'valid_labels': valid_labels,
                  'invalid_labels': invalid_labels
              })

          # Warnings consolidados
          if ecosystems_without_labels:
              print(f"::warning title=Ecosistemas Sin Labels::⚠️ {len(ecosystems_without_labels)} ecosistema(s) sin labels válidos: {', '.join(ecosystems_without_labels)}")

          if all_missing_labels:
              print(f"::warning title=Labels Faltantes::🏷️ {len(all_missing_labels)} label(s) no existen: {', '.join(sorted(all_missing_labels))}")

          # Notice de validación exitosa
          valid_count = sum(1 for v in validation_results if v['valid'] > 0)
          print(f"::notice title=Validación Exitosa::✅ {valid_count} de {len(validation_results)} ecosistemas tienen labels válidos")

          # ============================================
          # OUTPUTS (Usar delimitadores EOF para multilínea)
          # ============================================
          
          import random, string
          delimiter = ''.join(random.choices(string.ascii_uppercase + string.digits, k=16))
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              # Ecosistemas validados (con labels corregidos)
              f.write(f"validated_ecosystems<<{delimiter}\n")
              f.write(json.dumps(ecosystems, indent=2))
              f.write(f"\n{delimiter}\n")
              
              # Resultados de validación
              f.write(f"validation_results<<{delimiter}\n")
              f.write(json.dumps(validation_results, indent=2))
              f.write(f"\n{delimiter}\n")
              
              # Labels faltantes
              f.write(f"missing_labels={','.join(sorted(all_missing_labels))}\n")
              f.write(f"has_missing_labels={'true' if all_missing_labels else 'false'}\n")
              f.write(f"validation_status={'success' if all([v['valid_labels'] for v in validation_results]) else 'partial'}\n")

          print("✅ Validación completada")
          SCRIPT_EOF

          python3 /tmp/validate_labels.py

      - name: Generate Dependabot Config
        id: generate
        env:
          VALIDATED_ECOSYSTEMS: ${{ steps.validate_labels.outputs.validated_ecosystems }}
          SCHEDULE_INTERVAL: ${{ inputs.schedule }}
          DEFAULT_PR_LIMIT: ${{ inputs.pr_limit }}
        run: |
          cat > /tmp/generate_config.py << 'SCRIPT_EOF'
          import yaml, json, sys, os
          from pathlib import Path
          from datetime import datetime

          # ✅ Leer desde variable de entorno (más seguro para datos grandes)
          validated_json = os.getenv('VALIDATED_ECOSYSTEMS', '[]')
          schedule = os.getenv('SCHEDULE_INTERVAL', 'weekly')
          default_pr_limit = int(os.getenv('DEFAULT_PR_LIMIT', '5'))
          
          try:
              ecosystems = json.loads(validated_json)
          except json.JSONDecodeError as e:
              print(f"::error title=JSON Inválido::Error al parsear ecosistemas: {e}")
              print(f"::debug::JSON recibido (primeros 500 chars): {validated_json[:500]}")
              sys.exit(1)

          if not ecosystems:
              print(f"::error title=Sin Ecosistemas::No hay ecosistemas para configurar")
              sys.exit(1)

          # Debug
          print(f"::debug::Procesando {len(ecosystems)} ecosistemas")
          for eco in ecosystems:
              print(f"::debug::- {eco['ecosystem']} en {eco.get('directory', '/')}")

          # Generar configuración Dependabot
          config = {
              'version': 2,
              'updates': []
          }

          for eco in ecosystems:
              entry = {
                  'package-ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'schedule': {'interval': schedule},
                  'open-pull-requests-limit': eco.get('pr_limit', default_pr_limit)
              }

              # Agregar labels si existen (ya validados)
              if 'labels' in eco and eco['labels']:
                  # Puede venir como string "label1,label2" o como lista
                  if isinstance(eco['labels'], str):
                      labels_list = [l.strip() for l in eco['labels'].split(',') if l.strip()]
                  else:
                      labels_list = eco['labels']
                  
                  if labels_list:
                      entry['labels'] = labels_list

              # Agregar commit-message prefix si existe
              if 'prefix' in eco and eco['prefix']:
                  entry['commit-message'] = {'prefix': eco['prefix']}

              config['updates'].append(entry)
              print(f"::debug::✓ Configurado: {eco['ecosystem']} ({eco.get('directory', '/')})")

          # Guardar archivo
          try:
              Path('.github').mkdir(exist_ok=True)
              with open('.github/dependabot.yml', 'w') as f:
                  yaml.dump(config, f, default_flow_style=False, sort_keys=False)
              
              print(f"::notice title=Configuración Generada::✅ {len(config['updates'])} ecosistemas configurados en dependabot.yml")
          except Exception as e:
              print(f"::error title=Error Escritura::No se pudo guardar dependabot.yml: {e}")
              sys.exit(1)

          # Outputs
          timestamp = datetime.utcnow().isoformat() + 'Z'
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"ecosystems_count={len(config['updates'])}\n")
              f.write(f"schedule={schedule}\n")
              f.write(f"timestamp={timestamp}\n")
              f.write(f"config_file=.github/dependabot.yml\n")

          print(f"✅ Archivo generado: .github/dependabot.yml ({len(config['updates'])} ecosistemas)")
          SCRIPT_EOF

          python3 /tmp/generate_config.py

      - name: Commit Changes
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet .github/dependabot.yml; then
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "::notice title=Sin Cambios::📋 El archivo dependabot.yml ya está actualizado"
          else
            git add .github/dependabot.yml
            git commit -m "chore(deps): update dependabot config

          - Schedule: ${{ inputs.schedule }}
          - Ecosystems: ${{ steps.generate.outputs.ecosystems_count }}
          - Generated: ${{ steps.generate.outputs.timestamp }}

          [skip ci]"
            git push
            
            commit_sha=$(git rev-parse HEAD)
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "commit_hash=$commit_sha" >> $GITHUB_OUTPUT
            echo "::notice title=Cambios Confirmados::✅ Configuración actualizada en commit ${commit_sha:0:7}"
          fi

      - name: Generate Summary
        if: always()
        run: |
          cat > /tmp/generate_summary.py << 'SCRIPT_EOF'
          import json, os

          summary_parts = []
          summary_parts.append("# 🔧 Configuración de Dependabot\n\n")

          # Estado del commit
          commit_status = os.getenv('COMMIT_STATUS', 'false')
          if commit_status == 'true':
              commit_sha = os.getenv('COMMIT_SHA', 'unknown')
              summary_parts.append(f"## ✅ Configuración Actualizada\n\n")
              summary_parts.append(f"🎯 **Commit**: `{commit_sha[:7]}`\n\n")
          else:
              summary_parts.append("## 📋 Sin Cambios\n\n")
              summary_parts.append("La configuración ya estaba actualizada.\n\n")

          # Información de ecosistemas
          ecosystems_count = os.getenv('ECOSYSTEMS_COUNT', '0')
          schedule = os.getenv('SCHEDULE', 'weekly')
          timestamp = os.getenv('TIMESTAMP', 'unknown')

          summary_parts.append("## 📊 Detalles de Configuración\n\n")
          summary_parts.append("| Propiedad | Valor |\n")
          summary_parts.append("|-----------|-------|\n")
          summary_parts.append(f"| 🎯 Ecosistemas | **{ecosystems_count}** |\n")
          summary_parts.append(f"| ⏰ Frecuencia | `{schedule}` |\n")
          summary_parts.append(f"| 🕐 Generado | {timestamp} |\n\n")

          # Validación de labels
          has_missing = os.getenv('HAS_MISSING_LABELS', 'false')
          if has_missing == 'true':
              missing_labels = os.getenv('MISSING_LABELS', '')
              summary_parts.append("## ⚠️ Labels Faltantes\n\n")
              summary_parts.append(f"Los siguientes labels no existen en el repositorio:\n\n")
              summary_parts.append(f"```\n{missing_labels}\n```\n\n")
              summary_parts.append("> 💡 **Tip**: Crea estos labels manualmente o algunos ecosistemas no tendrán etiquetas.\n\n")

          # Resultados de validación detallados
          validation_results = os.getenv('VALIDATION_RESULTS', '[]')
          try:
              results = json.loads(validation_results)
              if results:
                  summary_parts.append("<details>\n")
                  summary_parts.append("<summary>📋 <b>Detalle de Validación por Ecosistema</b></summary>\n\n")
                  summary_parts.append("| Ecosistema | Directorio | Labels Válidos | Labels Inválidos |\n")
                  summary_parts.append("|------------|------------|----------------|------------------|\n")
                  for r in results:
                      valid_str = f"✅ {r['valid']}" if r['valid'] > 0 else "❌ 0"
                      invalid_str = f"⚠️ {r['invalid']}" if r['invalid'] > 0 else "✓"
                      summary_parts.append(f"| `{r['ecosystem']}` | `{r['directory']}` | {valid_str} | {invalid_str} |\n")
                  summary_parts.append("\n</details>\n\n")
          except:
              pass

          # Información adicional
          summary_parts.append("<details>\n")
          summary_parts.append("<summary>ℹ️ <b>¿Qué hace Dependabot?</b></summary>\n\n")
          summary_parts.append("Dependabot automáticamente:\n\n")
          summary_parts.append("- 🔍 **Escanea** dependencias regularmente\n")
          summary_parts.append("- 🛡️ **Detecta** vulnerabilidades de seguridad\n")
          summary_parts.append("- 🚀 **Crea PRs** automáticamente con las actualizaciones\n")
          summary_parts.append("- ✅ **Ejecuta tests** en los PRs (si están configurados)\n")
          summary_parts.append("- 🎯 **Respeta** semantic versioning\n\n")
          summary_parts.append("</details>\n\n")

          summary_parts.append("<details>\n")
          summary_parts.append("<summary>🛠️ <b>Personalizar Configuración</b></summary>\n\n")
          summary_parts.append("Para modificar la configuración, edita el workflow que llama a este reusable:\n\n")
          summary_parts.append("```yaml\n")
          summary_parts.append("with:\n")
          summary_parts.append("  schedule: 'daily'  # Cambiar frecuencia\n")
          summary_parts.append("  pr_limit: 10       # Ajustar límite de PRs\n")
          summary_parts.append("  ecosystems: |      # Modificar ecosistemas\n")
          summary_parts.append("    [\n")
          summary_parts.append('      {"ecosystem": "pip", "directory": "/api"}\n')
          summary_parts.append("    ]\n")
          summary_parts.append("```\n\n")
          summary_parts.append("</details>\n\n")

          summary_parts.append("---\n\n")
          summary_parts.append("**🎉 Configuración completada exitosamente!**\n\n")
          summary_parts.append("> 💡 **Tip**: Usa `workflow_dispatch` en el workflow llamador para regenerar esta configuración manualmente.\n")

          # Escribir summary
          summary = ''.join(summary_parts)
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
              f.write(summary)

          print("✅ Summary generado correctamente")
          SCRIPT_EOF

          # ✅ PASAR DATOS VALIDADOS
          VALIDATION_RESULTS='${{ steps.validate_labels.outputs.validation_results }}' \
          MISSING_LABELS='${{ steps.validate_labels.outputs.missing_labels }}' \
          HAS_MISSING_LABELS='${{ steps.validate_labels.outputs.has_missing_labels }}' \
          ECOSYSTEMS_COUNT='${{ steps.generate.outputs.ecosystems_count }}' \
          SCHEDULE='${{ steps.generate.outputs.schedule }}' \
          TIMESTAMP='${{ steps.generate.outputs.timestamp }}' \
          COMMIT_STATUS='${{ steps.commit.outputs.changes_detected }}' \
          COMMIT_SHA='${{ steps.commit.outputs.commit_hash }}' \
          GITHUB_REPOSITORY='${{ github.repository }}' \
          GITHUB_REF_NAME='${{ github.ref_name }}' \
          python3 /tmp/generate_summary.py
