name: Setup Dependabot

on:
  workflow_call:
    inputs:
      ecosystems:
        required: true
        type: string
        description: 'JSON con configuraciones de ecosistemas'

      schedule:
        required: false
        type: string
        default: 'weekly'
        description: 'Frecuencia de actualizaciones (daily, weekly, monthly)'

      pr_limit:
        required: false
        type: number
        default: 5
        description: 'M√°ximo de PRs abiertos simult√°neamente'

      target_branch:
        required: false
        type: string
        default: ''
        description: 'Rama objetivo para PRs (vac√≠o = rama predeterminada)'

jobs:
  configure:
    name: Configuring
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: read

    steps:
      - name: üöÄ Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Validate Labels
        id: validate_labels
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cat > /tmp/validate_labels.py << 'SCRIPT_EOF'
          import json, os, subprocess, sys
          from collections import defaultdict

          repo = os.getenv('GITHUB_REPOSITORY')

          try:
              result = subprocess.run(
                  ['gh', 'label', 'list', '--repo', repo, '--json', 'name,color,description', '--limit', '1000'],
                  capture_output=True, text=True, check=True
              )
              labels_data = json.loads(result.stdout)
              existing_labels = {label['name'].lower(): label for label in labels_data}
          except Exception as e:
              print(f"::error::No se pudieron obtener los labels: {e}")
              existing_labels = {}

          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error::Error al parsear ecosistemas: {e}")
              sys.exit(1)

          missing_by_ecosystem = defaultdict(list)
          valid_by_ecosystem = defaultdict(list)
          all_missing = set()

          for eco in ecosystems:
              labels = [l.strip() for l in eco.get('labels', '').split(',') if l.strip()]
              for label in labels:
                  if label.lower() in existing_labels:
                      valid_by_ecosystem[f"{eco['ecosystem']}|{eco['directory']}"].append(label)
                  else:
                      missing_by_ecosystem[f"{eco['ecosystem']}|{eco['directory']}"].append(label)
                      all_missing.add(label)

          # Generar outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"missing_labels={','.join(sorted(all_missing))}\n")
              f.write(f"missing_count={len(all_missing)}\n")
              f.write(f"valid_count={sum(len(v) for v in valid_by_ecosystem.values())}\n")
              f.write(f"has_missing={'true' if all_missing else 'false'}\n")

          # Guardar datos para el summary
          with open('/tmp/validation_data.json', 'w') as f:
              json.dump({
                  'missing_by_ecosystem': dict(missing_by_ecosystem),
                  'valid_by_ecosystem': dict(valid_by_ecosystem),
                  'existing_labels': existing_labels
              }, f)

          if all_missing:
              print(f"::warning title=Labels Faltantes::Se encontraron {len(all_missing)} labels sin configurar")
          else:
              print("::notice title=Validaci√≥n Exitosa::Todos los labels est√°n configurados correctamente")
          SCRIPT_EOF

          python3 /tmp/validate_labels.py

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üì¶ Install PyYAML
        run: pip install pyyaml

      - name: üìù Generate Dependabot Config
        run: |
          cat > /tmp/generate_config.py << 'SCRIPT_EOF'
          import json, os, sys

          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error::JSON inv√°lido: {e}")
              sys.exit(1)

          schedule = '${{ inputs.schedule }}'
          pr_limit = ${{ inputs.pr_limit }}
          target_branch = '${{ inputs.target_branch }}'

          config = {'version': 2, 'updates': []}

          for eco in ecosystems:
              update = {
                  'package-ecosystem': eco['ecosystem'],
                  'directory': eco['directory'],
                  'schedule': {'interval': schedule},
                  'open-pull-requests-limit': eco.get('pr_limit', pr_limit)
              }

              if target_branch:
                  update['target-branch'] = target_branch

              labels = [l.strip() for l in eco.get('labels', '').split(',') if l.strip()]
              if labels:
                  update['labels'] = labels

              prefix = eco.get('prefix', '').strip()
              if prefix:
                  update['commit-message'] = {'prefix': prefix}

              config['updates'].append(update)

          import yaml
          os.makedirs('.github', exist_ok=True)
          
          # Generar YAML con indentaci√≥n correcta
          with open('.github/dependabot.yml', 'w') as f:
              yaml.dump(config, f, sort_keys=False, default_flow_style=False, indent=2)

          print("‚úÖ Configuraci√≥n generada exitosamente")
          
          # Verificar el archivo generado
          with open('.github/dependabot.yml', 'r') as f:
              content = f.read()
              print("\nüìÑ Contenido generado:")
              print(content)
          SCRIPT_EOF

          python3 /tmp/generate_config.py

      - name: üíæ Commit Changes
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet .github/dependabot.yml; then
            echo "status=unchanged" >> $GITHUB_OUTPUT
            echo "::notice::No hay cambios en la configuraci√≥n"
          else
            git add .github/dependabot.yml
            git commit -m "chore(deps): update dependabot configuration [skip ci]"
            git push
            echo "status=updated" >> $GITHUB_OUTPUT
            echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "::notice::Configuraci√≥n actualizada y commitada"
          fi

      - name: üîç Check Dependabot PRs
        id: check_prs
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          sleep 5

          prs=$(gh pr list \
            --repo ${{ github.repository }} \
            --author "app/dependabot" \
            --state open \
            --json number,title,createdAt,labels \
            --limit 20)

          echo "prs_data<<EOF" >> $GITHUB_OUTPUT
          echo "$prs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          count=$(echo "$prs" | jq '. | length')
          echo "prs_count=$count" >> $GITHUB_OUTPUT

      - name: üìä Generate Summary
        if: always()
        env:
          ECOSYSTEMS_JSON: ${{ inputs.ecosystems }}
          DEFAULT_PR_LIMIT: ${{ inputs.pr_limit }}
          COMMIT_STATUS: ${{ steps.commit.outputs.status }}
          COMMIT_SHA: ${{ steps.commit.outputs.sha }}
          PRS_DATA: ${{ steps.check_prs.outputs.prs_data }}
          PRS_COUNT: ${{ steps.check_prs.outputs.prs_count }}
        run: |
          cat > /tmp/generate_summary.py << 'SCRIPT_EOF'
          import json, os, sys
          from datetime import datetime

          repo = os.getenv('GITHUB_REPOSITORY')
          run_id = os.getenv('GITHUB_RUN_ID')
          default_pr_limit = os.getenv('DEFAULT_PR_LIMIT', '5')

          # Cargar datos de validaci√≥n
          try:
              with open('/tmp/validation_data.json', 'r') as f:
                  validation = json.load(f)
          except:
              validation = {'missing_by_ecosystem': {}, 'valid_by_ecosystem': {}, 'existing_labels': {}}

          # Parsear ecosistemas
          try:
              ecosystems = json.loads(os.getenv('ECOSYSTEMS_JSON', '[]'))
          except:
              ecosystems = []

          # Parsear PRs
          prs_count = int(os.getenv('PRS_COUNT', '0'))
          try:
              prs_data = json.loads(os.getenv('PRS_DATA', '[]'))
          except:
              prs_data = []

          commit_status = os.getenv('COMMIT_STATUS', 'unknown')
          commit_sha = os.getenv('COMMIT_SHA', 'N/A')

          # Generar summary
          summary = []

          # Header
          summary.append("# ü§ñ Configuraci√≥n de Dependabot\n\n")

          # Estado del commit
          if commit_status == 'updated':
              summary.append(f"‚úÖ **Configuraci√≥n actualizada** ‚Ä¢ Commit: `{commit_sha[:7]}`\n\n")
          else:
              summary.append("‚ÑπÔ∏è **Sin cambios** ‚Ä¢ La configuraci√≥n est√° actualizada\n\n")

          summary.append("---\n\n")

          # Tabla consolidada de ecosistemas
          summary.append("## üì¶ Ecosistemas Configurados\n\n")
          summary.append("<table>\n")
          summary.append("<tr>\n")
          summary.append("<th>Ecosistema</th>\n")
          summary.append("<th>Directorio</th>\n")
          summary.append("<th>Prefijo</th>\n")
          summary.append("<th>PR Limit</th>\n")
          summary.append("<th>Labels V√°lidos</th>\n")
          summary.append("<th>Labels Faltantes</th>\n")
          summary.append("</tr>\n")

          for eco in ecosystems:
              eco_key = f"{eco['ecosystem']}|{eco['directory']}"
              valid_labels = validation['valid_by_ecosystem'].get(eco_key, [])
              missing_labels = validation['missing_by_ecosystem'].get(eco_key, [])
              existing_labels = validation['existing_labels']

              # Generar badges para labels v√°lidos
              valid_badges = []
              for label in valid_labels:
                  label_data = existing_labels.get(label.lower(), {})
                  color = label_data.get('color', '0366d6')
                  badge = f'<img src="https://img.shields.io/badge/-{label}-{color}" alt="{label}"/>'
                  link = f'https://github.com/{repo}/labels/{label.replace(" ", "%20")}'
                  valid_badges.append(f'<a href="{link}">{badge}</a>')

              # Labels faltantes
              missing_badges = [f'<code>{label}</code>' for label in missing_labels]

              # Usar el PR limit del ecosistema o el default
              eco_pr_limit = eco.get('pr_limit', default_pr_limit)

              summary.append("<tr>\n")
              summary.append(f"<td><code>{eco['ecosystem']}</code></td>\n")
              summary.append(f"<td><code>{eco['directory']}</code></td>\n")
              summary.append(f"<td><code>{eco.get('prefix', '-')}</code></td>\n")
              summary.append(f"<td align='center'>{eco_pr_limit}</td>\n")
              summary.append(f"<td>{'<br>'.join(valid_badges) if valid_badges else '-'}</td>\n")
              summary.append(f"<td>{'<br>'.join(missing_badges) if missing_badges else '‚úÖ'}</td>\n")
              summary.append("</tr>\n")

          summary.append("</table>\n\n")

          # Warning si hay labels faltantes
          all_missing = set()
          for labels in validation['missing_by_ecosystem'].values():
              all_missing.update(labels)

          if all_missing:
              summary.append("> ‚ö†Ô∏è **Acci√≥n Recomendada:** Algunos labels no existen en el repositorio. ")
              summary.append(f"[**Crear labels faltantes**](https://github.com/{repo}/labels/new) ")
              summary.append("o ajustar la configuraci√≥n en el caller.\n\n")

          summary.append("---\n\n")

          # PRs Activos
          if prs_count > 0:
              summary.append(f"## üîÑ Pull Requests de Dependabot ({prs_count})\n\n")
              summary.append("<table>\n")
              summary.append("<tr><th>#</th><th>T√≠tulo</th><th>Labels</th><th>Creado</th></tr>\n")

              for pr in prs_data[:10]:
                  pr_number = pr['number']
                  pr_title = pr['title']
                  pr_labels = ', '.join([f"`{l['name']}`" for l in pr['labels'][:3]])
                  pr_date = pr['createdAt'][:10]
                  pr_link = f"https://github.com/{repo}/pull/{pr_number}"

                  summary.append("<tr>\n")
                  summary.append(f"<td><a href='{pr_link}'>#{pr_number}</a></td>\n")
                  summary.append(f"<td>{pr_title}</td>\n")
                  summary.append(f"<td>{pr_labels if pr_labels else '-'}</td>\n")
                  summary.append(f"<td>{pr_date}</td>\n")
                  summary.append("</tr>\n")

              summary.append("</table>\n\n")

              if prs_count > 10:
                  summary.append(f"> Ver todos los PRs en [Pull Requests](https://github.com/{repo}/pulls?q=is%3Apr+author%3Aapp%2Fdependabot)\n\n")
          else:
              summary.append("## üîÑ Pull Requests de Dependabot\n\n")
              summary.append("> ‚ÑπÔ∏è No hay PRs activos de Dependabot en este momento.\n\n")

          summary.append("---\n\n")

          # Informaci√≥n del Workflow
          summary.append("<details>\n")
          summary.append("<summary><b>üìö Sobre el Workflow Reusable</b></summary>\n\n")

          summary.append("### ‚úÖ Caracter√≠sticas Implementadas\n\n")
          summary.append("<table>\n")
          summary.append("<tr><th>Caracter√≠stica</th><th>Descripci√≥n</th></tr>\n")
          summary.append("<tr><td>üîç Validaci√≥n autom√°tica de labels</td><td>Detecta labels faltantes antes de generar configuraci√≥n</td></tr>\n")
          summary.append("<tr><td>üìä Summary con dise√±o consolidado</td><td>Tabla √∫nica con toda la informaci√≥n por ecosistema</td></tr>\n")
          summary.append("<tr><td>üè∑Ô∏è Badges con colores reales</td><td>Muestra los labels con sus colores del repositorio</td></tr>\n")
          summary.append("<tr><td>üîó Enlaces directos</td><td>A PRs, labels y configuraci√≥n de Dependabot</td></tr>\n")
          summary.append("<tr><td>üîÑ Detecci√≥n de PRs existentes</td><td>Lista PRs activos de Dependabot con metadata</td></tr>\n")
          summary.append("<tr><td>üìù Configuraci√≥n personalizable</td><td>Prefijos, l√≠mites de PRs, schedules por ecosistema</td></tr>\n")
          summary.append("<tr><td>üéØ Rama objetivo configurable</td><td>Permite dirigir PRs a branches espec√≠ficas</td></tr>\n")
          summary.append("</table>\n\n")

          summary.append("### üîÆ Mejoras Futuras Sugeridas\n\n")
          summary.append("- üîî Notificaciones Slack/Discord cuando se crean PRs\n")
          summary.append("- üìà Matriz de compatibilidad entre versiones\n")
          summary.append("- üõ°Ô∏è Integraci√≥n con GitHub Security Advisories\n")
          summary.append("- üìä Dashboard centralizado para m√∫ltiples repositorios\n")
          summary.append("- üîç An√°lisis de impacto de actualizaciones\n\n")

          summary.append("### ‚öôÔ∏è Configuraci√≥n Recomendada\n\n")
          summary.append(f"1. **Habilitar Dependabot:** [Settings > Security](https://github.com/{repo}/settings/security_analysis)\n")
          summary.append(f"2. **Revisar labels:** [Gestionar labels](https://github.com/{repo}/labels)\n")
          summary.append(f"3. **Branch protection:** [Configurar reglas](https://github.com/{repo}/settings/branches)\n\n")

          summary.append("</details>\n\n")

          # Footer
          timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
          summary.append("---\n\n")
          summary.append(f"<sub>ü§ñ Generado por [Reusable Workflows](https://github.com/jersonmartinez/reusable-workflows) ‚Ä¢ {timestamp}</sub>\n")

          # Escribir summary
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
              f.write(''.join(summary))

          print("‚úÖ Summary generado correctamente")
          SCRIPT_EOF

          python3 /tmp/generate_summary.py
