---
name: Setup Dependabot

on:
  workflow_call:
    inputs:
      ecosystems:
        required: true
        type: string
        description: 'JSON con configuraciones de ecosistemas'

      schedule:
        required: false
        type: string
        default: 'weekly'
        description: 'Frecuencia de actualizaciones (daily, weekly, monthly)'

      pr_limit:
        required: false
        type: number
        default: 5
        description: 'Máximo de PRs abiertos simultáneamente'

jobs:
  configure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read  # Para leer labels del repositorio

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Labels
        id: validate_labels
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cat > /tmp/validate_labels.py << 'SCRIPT_EOF'
          import json, os, subprocess, sys

          # Obtener labels existentes del repositorio
          repo = os.getenv('GITHUB_REPOSITORY')
          
          try:
              result = subprocess.run(
                  ['gh', 'label', 'list', '--repo', repo, '--json', 'name', '--limit', '1000'],
                  capture_output=True,
                  text=True,
                  check=True
              )
              existing_labels = {label['name'].lower() for label in json.loads(result.stdout)}
              print(f"::notice::📋 Encontrados {len(existing_labels)} labels en el repositorio")
          except Exception as e:
              print(f"::warning::No se pudieron obtener los labels: {e}")
              existing_labels = set()

          # Parsear ecosistemas
          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error::JSON inválido: {e}")
              sys.exit(1)

          # Validar labels por ecosistema
          validation_results = []
          all_missing_labels = set()
          
          for eco in ecosystems:
              if 'labels' not in eco:
                  continue
                  
              requested_labels = [l.strip() for l in eco['labels'].split(',')]
              valid_labels = []
              invalid_labels = []
              
              for label in requested_labels:
                  label_lower = label.lower()
                  if label_lower in existing_labels:
                      valid_labels.append(label)
                  else:
                      invalid_labels.append(label)
                      all_missing_labels.add(label)
              
              # Actualizar ecosistema solo con labels válidos
              if valid_labels:
                  eco['labels'] = ','.join(valid_labels)
                  print(f"::notice::✅ {eco['ecosystem']}: {len(valid_labels)} labels válidos")
              else:
                  # Remover el campo labels si no hay ninguno válido
                  eco.pop('labels', None)
                  print(f"::warning::⚠️ {eco['ecosystem']}: Sin labels válidos")
              
              if invalid_labels:
                  print(f"::warning::🏷️ {eco['ecosystem']}: Labels omitidos: {', '.join(invalid_labels)}")
              
              validation_results.append({
                  'ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'valid_labels': valid_labels,
                  'invalid_labels': invalid_labels
              })

          # Guardar resultados
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"validated_ecosystems={json.dumps(ecosystems)}\n")
              f.write(f"validation_results={json.dumps(validation_results)}\n")
              f.write(f"missing_labels={json.dumps(sorted(list(all_missing_labels)))}\n")
              f.write(f"has_missing_labels={'true' if all_missing_labels else 'false'}\n")

          if all_missing_labels:
              print(f"::warning::⚠️ Total de labels faltantes: {len(all_missing_labels)}")
          else:
              print("::notice::✅ Todos los labels configurados existen")
          SCRIPT_EOF

          python3 /tmp/validate_labels.py

      - name: Generate Dependabot Config
        id: generate
        run: |
          cat > /tmp/generate_config.py << 'SCRIPT_EOF'
          import yaml, json, sys, os
          from pathlib import Path
          from datetime import datetime

          # Parsear configuración
          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
              validation_results = json.loads('''${{ steps.validate_labels.outputs.validation_results }}''')
          except json.JSONDecodeError as e:
              print(f"::error::JSON inválido: {e}")
              sys.exit(1)

          # Crear mapa de validación
          validation_map = {
              f"{v['ecosystem']}-{v['directory']}": v 
              for v in validation_results
          }

          # Generar configuración
          config = {
              'version': 2,
              'updates': []
          }

          ecosystems_summary = []
          
          for eco in ecosystems:
              key = f"{eco['ecosystem']}-{eco.get('directory', '/')}"
              validation = validation_map.get(key, {'valid_labels': [], 'invalid_labels': []})
              
              entry = {
                  'package-ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'schedule': {'interval': '${{ inputs.schedule }}'},
                  'open-pull-requests-limit': eco.get('pr_limit', ${{ inputs.pr_limit }})
              }

              # Solo usar labels válidos
              valid_labels = validation.get('valid_labels', [])
              invalid_labels = validation.get('invalid_labels', [])
              
              if valid_labels:
                  entry['labels'] = valid_labels
                  if invalid_labels:
                      print(f"::warning::{eco['ecosystem']} ({eco.get('directory', '/')}): Omitidos labels inválidos: {', '.join(invalid_labels)}")

              # Commit prefix opcional
              prefix = 'chore'
              if 'prefix' in eco:
                  prefix = eco['prefix']
                  entry['commit-message'] = {'prefix': prefix}

              config['updates'].append(entry)

              # Guardar info para el summary
              ecosystems_summary.append({
                  'ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'pr_limit': eco.get('pr_limit', ${{ inputs.pr_limit }}),
                  'valid_labels': ', '.join(valid_labels) if valid_labels else 'dependencies',
                  'invalid_labels': ', '.join(invalid_labels) if invalid_labels else '',
                  'prefix': prefix
              })

          # Guardar archivo
          Path('.github').mkdir(exist_ok=True)
          with open('.github/dependabot.yml', 'w') as f:
              yaml.dump(config, f, default_flow_style=False, sort_keys=False)

          print(f"::notice::✅ Configurados {len(ecosystems)} ecosistemas")

          # Guardar outputs para el summary
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"ecosystems_count={len(ecosystems)}\n")
              f.write(f"ecosystems_json={json.dumps(ecosystems_summary)}\n")
              f.write(f"schedule=${{ inputs.schedule }}\n")
              f.write(f"timestamp={datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n")

          # Mostrar configuración generada
          print("\n📋 Configuración generada:")
          print(yaml.dump(config, default_flow_style=False))
          SCRIPT_EOF

          python3 /tmp/generate_config.py

      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        id: commit
        with:
          commit_message: 'chore: update Dependabot configuration [skip ci]'
          file_pattern: '.github/dependabot.yml'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Generate Summary
        if: always()
        run: |
          cat > /tmp/generate_summary.py << 'SCRIPT_EOF'
          import json, os

          # Leer outputs
          ecosystems_json = os.getenv('ECOSYSTEMS_JSON', '[]')
          ecosystems = json.loads(ecosystems_json) if ecosystems_json else []
          missing_labels = json.loads(os.getenv('MISSING_LABELS', '[]'))
          has_missing = os.getenv('HAS_MISSING_LABELS', 'false')
          count = os.getenv('ECOSYSTEMS_COUNT', '0')
          schedule = os.getenv('SCHEDULE', 'weekly')
          timestamp = os.getenv('TIMESTAMP', 'N/A')
          commit_status = os.getenv('COMMIT_STATUS', 'false')
          commit_sha = os.getenv('COMMIT_SHA', '')
          repo = os.getenv('GITHUB_REPOSITORY', '')
          ref_name = os.getenv('GITHUB_REF_NAME', 'main')

          # Iconos por ecosistema
          icons = {
              'npm': '📦', 'yarn': '🧶', 'pnpm': '📦', 'pip': '🐍',
              'docker': '🐳', 'github-actions': '⚡', 'maven': '☕',
              'gradle': '🐘', 'composer': '🎼', 'bundler': '💎',
              'cargo': '🦀', 'gomod': '🐹', 'nuget': '📘'
          }

          # Determinar estado
          if commit_status == "true":
              status_badge = "✅ **Configuración Actualizada**"
              status_color = "🟢"
              status_text = "Actualizado"
          else:
              status_badge = "ℹ️ **Sin Cambios**"
              status_color = "🔵"
              status_text = "Sin cambios"

          # Construir summary
          summary_parts = []
          
          summary_parts.append("# 🤖 Dependabot Configuration Report\n")
          summary_parts.append(f"{status_badge}\n")
          
          # Advertencia de labels faltantes
          if has_missing == 'true':
              summary_parts.append("\n> ⚠️ **Advertencia**: Algunos labels configurados no existen en el repositorio\n")
          
          summary_parts.append("\n---\n\n")
          summary_parts.append("## 📊 Resumen de Configuración\n\n")
          summary_parts.append("| Métrica | Valor |\n")
          summary_parts.append("|---------|-------|\n")
          summary_parts.append(f"| 🎯 **Ecosistemas Configurados** | `{count}` |\n")
          summary_parts.append(f"| 📅 **Frecuencia de Actualización** | `{schedule}` |\n")
          summary_parts.append(f"| ⏰ **Ejecutado el** | `{timestamp}` |\n")
          summary_parts.append(f"| 🔄 **Estado del Commit** | {status_color} {status_text} |\n")

          if commit_sha and commit_status == "true":
              short_sha = commit_sha[:7]
              summary_parts.append(f"| 🔗 **Commit SHA** | [`{short_sha}`](https://github.com/{repo}/commit/{commit_sha}) |\n")

          summary_parts.append("\n---\n\n")
          summary_parts.append("## 🎯 Ecosistemas Configurados\n\n")
          summary_parts.append("| Ecosistema | Directorio | PRs | Labels Válidos | Labels Omitidos | Prefix |\n")
          summary_parts.append("|------------|------------|-----|----------------|-----------------|--------|\n")

          for eco in ecosystems:
              icon = icons.get(eco['ecosystem'], '📦')
              valid = eco.get('valid_labels', 'dependencies')
              invalid = eco.get('invalid_labels', '')
              
              invalid_cell = f"⚠️ `{invalid}`" if invalid else "✅ Todos"
              
              summary_parts.append(
                  f"| {icon} **{eco['ecosystem']}** | "
                  f"`{eco['directory']}` | "
                  f"{eco['pr_limit']} | "
                  f"`{valid}` | "
                  f"{invalid_cell} | "
                  f"`{eco['prefix']}` |\n"
              )

          # Sección de labels faltantes
          if has_missing == 'true':
              summary_parts.append("\n---\n\n")
              summary_parts.append("## ⚠️ Labels Faltantes\n\n")
              summary_parts.append("Los siguientes labels fueron omitidos porque no existen en el repositorio:\n\n")
              summary_parts.append("| Label | Acción Recomendada |\n")
              summary_parts.append("|-------|--------------------|\n")
              
              for label in missing_labels:
                  create_url = f"https://github.com/{repo}/labels/new?name={label}&color=0366d6"
                  summary_parts.append(f"| `{label}` | [➕ Crear Label]({create_url}) |\n")
              
              summary_parts.append("\n> 💡 **Recomendación**: Crea los labels faltantes para que Dependabot los use en futuros PRs.\n")

          summary_parts.append("\n---\n\n")
          summary_parts.append("## 🔗 Enlaces Útiles\n\n")
          summary_parts.append("| Recurso | Enlace |\n")
          summary_parts.append("|---------|--------|\n")
          summary_parts.append(f"| 📄 **Configuración Generada** | [`.github/dependabot.yml`](https://github.com/{repo}/blob/{ref_name}/.github/dependabot.yml) |\n")
          summary_parts.append(f"| 🏷️ **Gestionar Labels** | [Repository Labels](https://github.com/{repo}/labels) |\n")
          summary_parts.append(f"| 🔄 **Monitorear Actualizaciones** | [Dependency Graph](https://github.com/{repo}/network/updates) |\n")
          summary_parts.append(f"| 🔍 **Pull Requests de Dependabot** | [Ver PRs](https://github.com/{repo}/pulls?q=is%3Apr+author%3Aapp%2Fdependabot) |\n")
          summary_parts.append(f"| 🛡️ **Alertas de Seguridad** | [Security Advisories](https://github.com/{repo}/security/dependabot) |\n")
          summary_parts.append("| 📚 **Documentación Oficial** | [Dependabot Docs](https://docs.github.com/en/code-security/dependabot) |\n")

          summary_parts.append("\n---\n\n")
          summary_parts.append("## 📋 Próximos Pasos\n\n")
          
          if has_missing == 'true':
              summary_parts.append("1. 🏷️ **Crear labels faltantes**: Usa los enlaces de la tabla anterior\n")
              summary_parts.append("2. 🔄 **Re-ejecutar workflow**: Para aplicar los nuevos labels\n")
              summary_parts.append(f"3. ✅ **Revisar configuración**: Verifica que todos los ecosistemas estén correctamente configurados\n")
          else:
              summary_parts.append(f"1. ✅ **Revisar configuración**: Verifica que todos los ecosistemas estén correctamente configurados\n")
          
          summary_parts.append(f"2. ⏳ **Esperar primera actualización**: Dependabot ejecutará su primer scan según el schedule configurado (`{schedule}`)\n")
          summary_parts.append("3. 🔔 **Configurar notificaciones**: Ajusta tus preferencias en [Settings → Notifications](https://github.com/settings/notifications)\n")
          summary_parts.append("4. 👀 **Monitorear PRs**: Revisa y aprueba los pull requests generados automáticamente\n")
          summary_parts.append("5. 🔒 **Habilitar auto-merge** (opcional): Para dependencias de parches/menores\n")

          summary_parts.append("\n---\n\n")
          summary_parts.append("## ⚙️ Configuración Actual\n\n")
          summary_parts.append("```yaml\n")
          summary_parts.append(f"schedule: {schedule}\n")
          summary_parts.append(f"total_ecosystems: {count}\n")
          if has_missing == 'true':
              summary_parts.append(f"missing_labels: {len(missing_labels)}\n")
          summary_parts.append("```\n")

          summary_parts.append("\n---\n\n")
          summary_parts.append("<details>\n")
          summary_parts.append("<summary>📖 <b>¿Qué hace Dependabot?</b></summary>\n\n")
          summary_parts.append("Dependabot mantiene tus dependencias actualizadas automáticamente:\n\n")
          summary_parts.append("- 🔍 **Escanea** tus archivos de dependencias regularmente\n")
          summary_parts.append("- 🆕 **Detecta** nuevas versiones disponibles\n")
          summary_parts.append("- 🔒 **Identifica** vulnerabilidades de seguridad\n")
          summary_parts.append("- 🚀 **Crea PRs** automáticamente con las actualizaciones\n")
          summary_parts.append("- ✅ **Ejecuta tests** en los PRs (si están configurados)\n")
          summary_parts.append("- 🎯 **Respeta** semantic versioning\n\n")
          summary_parts.append("</details>\n\n")

          summary_parts.append("<details>\n")
          summary_parts.append("<summary>🛠️ <b>Personalizar Configuración</b></summary>\n\n")
          summary_parts.append("Para modificar la configuración, edita el workflow que llama a este reusable:\n\n")
          summary_parts.append("```yaml\n")
          summary_parts.append("with:\n")
          summary_parts.append("  schedule: 'daily'  # Cambiar frecuencia\n")
          summary_parts.append("  pr_limit: 10       # Ajustar límite de PRs\n")
          summary_parts.append("  ecosystems: |      # Modificar ecosistemas\n")
          summary_parts.append("    [\n")
          summary_parts.append('      {"ecosystem": "pip", "directory": "/api"}\n')
          summary_parts.append("    ]\n")
          summary_parts.append("```\n\n")
          summary_parts.append("</details>\n\n")

          summary_parts.append("---\n\n")
          summary_parts.append("**🎉 Configuración completada exitosamente!**\n\n")
          summary_parts.append("> 💡 **Tip**: Usa `workflow_dispatch` en el workflow llamador para regenerar esta configuración manualmente cuando sea necesario.\n")

          # Escribir al GITHUB_STEP_SUMMARY
          summary = ''.join(summary_parts)
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
              f.write(summary)

          print("✅ Summary generado correctamente")
          SCRIPT_EOF

          # Ejecutar el script con las variables de entorno
          ECOSYSTEMS_JSON='${{ steps.generate.outputs.ecosystems_json }}' \
          ECOSYSTEMS_COUNT='${{ steps.generate.outputs.ecosystems_count }}' \
          MISSING_LABELS='${{ steps.validate_labels.outputs.missing_labels }}' \
          HAS_MISSING_LABELS='${{ steps.validate_labels.outputs.has_missing_labels }}' \
          SCHEDULE='${{ steps.generate.outputs.schedule }}' \
          TIMESTAMP='${{ steps.generate.outputs.timestamp }}' \
          COMMIT_STATUS='${{ steps.commit.outputs.changes_detected }}' \
          COMMIT_SHA='${{ steps.commit.outputs.commit_hash }}' \
          GITHUB_REPOSITORY='${{ github.repository }}' \
          GITHUB_REF_NAME='${{ github.ref_name }}' \
          python3 /tmp/generate_summary.py
