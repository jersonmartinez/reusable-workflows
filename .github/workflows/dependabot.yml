---
name: Setup Dependabot

on:
  workflow_call:
    inputs:
      ecosystems:
        required: true
        type: string
        description: 'JSON con configuraciones de ecosistemas'

      schedule:
        required: false
        type: string
        default: 'weekly'
        description: 'Frecuencia de actualizaciones (daily, weekly, monthly)'

      pr_limit:
        required: false
        type: number
        default: 5
        description: 'M√°ximo de PRs abiertos simult√°neamente'

jobs:
  configure:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Dependabot Config
        id: generate
        run: |
          python3 << 'EOF'
          import yaml, json, sys, os
          from pathlib import Path
          from datetime import datetime

          # Parsear configuraci√≥n
          try:
              ecosystems = json.loads('''${{ inputs.ecosystems }}''')
          except json.JSONDecodeError as e:
              print(f"::error::JSON inv√°lido: {e}")
              sys.exit(1)

          # Generar configuraci√≥n
          config = {
              'version': 2,
              'updates': []
          }

          ecosystems_summary = []

          for eco in ecosystems:
              entry = {
                  'package-ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'schedule': {'interval': '${{ inputs.schedule }}'},
                  'open-pull-requests-limit': eco.get('pr_limit', ${{ inputs.pr_limit }})
              }

              # Labels opcionales
              labels = []
              if 'labels' in eco:
                  labels = eco['labels'].split(',')
                  entry['labels'] = labels

              # Commit prefix opcional
              prefix = 'chore'
              if 'prefix' in eco:
                  prefix = eco['prefix']
                  entry['commit-message'] = {'prefix': prefix}

              config['updates'].append(entry)

              # Guardar info para el summary
              ecosystems_summary.append({
                  'ecosystem': eco['ecosystem'],
                  'directory': eco.get('directory', '/'),
                  'pr_limit': eco.get('pr_limit', ${{ inputs.pr_limit }}),
                  'labels': ', '.join(labels) if labels else 'dependencies',
                  'prefix': prefix
              })

          # Guardar archivo
          Path('.github').mkdir(exist_ok=True)
          with open('.github/dependabot.yml', 'w') as f:
              yaml.dump(config, f, default_flow_style=False, sort_keys=False)

          print(f"::notice::‚úÖ Configurados {len(ecosystems)} ecosistemas")

          # Guardar outputs para el summary
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"ecosystems_count={len(ecosystems)}\n")
              f.write(f"ecosystems_json={json.dumps(ecosystems_summary)}\n")
              f.write(f"schedule=${{ inputs.schedule }}\n")
              f.write(f"timestamp={datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n")

          # Mostrar configuraci√≥n generada
          print("\nüìã Configuraci√≥n generada:")
          print(yaml.dump(config, default_flow_style=False))
          EOF

      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        id: commit
        with:
          commit_message: 'chore: update Dependabot configuration [skip ci]'
          file_pattern: '.github/dependabot.yml'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Generate Summary
        if: always()
        run: |
          python3 << 'EOF'
          import json, os

          # Leer outputs
          ecosystems_json = '''${{ steps.generate.outputs.ecosystems_json }}'''
          ecosystems = json.loads(ecosystems_json) if ecosystems_json else []
          count = "${{ steps.generate.outputs.ecosystems_count }}"
          schedule = "${{ steps.generate.outputs.schedule }}"
          timestamp = "${{ steps.generate.outputs.timestamp }}"
          commit_status = "${{ steps.commit.outputs.changes_detected }}"
          commit_sha = "${{ steps.commit.outputs.commit_hash }}"

          # Iconos por ecosistema
          icons = {
              'npm': 'üì¶',
              'yarn': 'üß∂',
              'pnpm': 'üì¶',
              'pip': 'üêç',
              'docker': 'üê≥',
              'github-actions': '‚ö°',
              'maven': '‚òï',
              'gradle': 'üêò',
              'composer': 'üéº',
              'bundler': 'üíé',
              'cargo': 'ü¶Ä',
              'gomod': 'üêπ',
              'nuget': 'üìò'
          }

          # Determinar estado
          if commit_status == "true":
              status_badge = "‚úÖ **Configuraci√≥n Actualizada**"
              status_color = "üü¢"
          else:
              status_badge = "‚ÑπÔ∏è **Sin Cambios**"
              status_color = "üîµ"

          summary = f"""